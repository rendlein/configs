(in-package :stumpwm)
(load "/home/voleur/.src/stumpwm/contrib/mpd")

(setf *screen-mode-line-format* (list "%m"))
(set-font "-*-terminus-medium-r-*-*-12-*-*-*-*-*-*-")
(setf *mode-line-border-width* 0)

;;; Variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defvar *wallpapers-dir* "/home/voleur/.wallpapers/")
(defvar *mplayer-map* nil)

;;; Functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun cat (&rest strings) 
  (apply 'concatenate 'string strings))

(defun shell-command (command)
  (check-type command string)
  (echo-string (current-screen) (run-shell-command command t)))

;; From XSteve's StumpWM page
;; (www.xsteve.at/prg/stumpwm/)
(defun random-background ()
    "Select a random image"
      (let ((file-list (directory (cat +wallpapers-dir+ "*.*")))
                    (*random-state* (make-random-state t)))
            (namestring (nth (random (length file-list)) file-list))))

;;; Application Commands
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defcommand browser () ()
            (run-or-raise "tabbed surf -e" '(:class "tabbed")))
(defcommand luakit () ()
            (run-or-raise "luakit" '(:class "luakit")))
(defcommand opera () ()
            (run-or-raise "opera" '(:class "Opera")))

(defcommand play-tube () ()
            (run-or-raise "you -speed 1.3" '(:class "MPlayer")))

(defcommand reinit () ()
            (run-commands "reload" "loadrc"))

(defcommand terminal () ()
            (run-or-raise "urxvtc -e tmux attach " '(:class "URxvt")))	
(defcommand terminal-2 () ()
            (run-or-raise "st" '(:class "st-256color")))

(defcommand dmenu () ()
            (run-shell-command "dmenu_run"))

;; Simple shell script to get the info
;; for ':class' 
(defcommand get-class () ()
            (shell-command "getclass"))


;;; Keybindings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Mplayer key-commands
(defcommand mplayer-pause () ()
            (run-shell-command "mplr p"))
(defcommand mplayer-next () ()
            (run-shell-command "mplr n"))
(defcommand mplayer-seek-forward () ()
            (run-shell-command "mplr s 10%"))

;; Custom key maps
(fill-keymap *mplayer-map*
        (kbd "SPC") "mplayer-pause"
        (kbd "n")   "mplayer-next"
        (kbd "f")   "mplayer-seek-forward")

;; Key bindings
(define-key *root-map* (kbd "c") 	"terminal")
(define-key *root-map* (kbd "C-s")  "terminal-2")
(define-key *root-map* (kbd "y") 	"play-tube")
(define-key *root-map* (kbd "M-w")	"browser")
(define-key *root-map* (kbd "M-W")  "luakit")
(define-key *root-map* (kbd "Q") 	"quit")
(define-key *root-map* (kbd "M-r") 	"reinit")
(define-key *root-map* (kbd "b") 	"mode-line")
(define-key *root-map* (kbd "C-b")  "get-class")
(define-key *root-map* (kbd "C-p")  "dmenu")

(define-key *root-map* (kbd "C-m")  '*mplayer-map*)
(define-key *root-map* (kbd "M-x")  '*mpd-map*)

;;; Groups
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Workspaces
;; Set it up to be a little bit more like dwm
(run-commands "gnewbg Web" "gnewbg Misc")

(clear-window-placement-rules)

;; set for lock and raise
(define-frame-preference "Default"
    (0 t t :class "URxvt"))

(define-frame-preference "Web"
    (0 t t :class "tabbed")
    (0 t t :class "Opera") 
    (0 t t :class "luakit"))

(define-frame-preference "Misc"
    (0 t t :class "MPlayer")
    (0 t t :class "Wine"))

;;; Run at startups
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmacro startup-scripts (name command)
  `(if (equal (run-shell-command (cat "is_running " ,name) t) "0") 
     ,command))

;; Start tmux server if not already running
(startup-scripts "tmux" (run-shell-command "tmux_setup"))

;; Connect to mpd if running
(startup-scripts "musicpd" 
                 (progn
                   (run-shell-command "musicpd")
                   (run-commands "mpd-connect")))

(run-shell-command "xsetroot -cursor_name left_ptr")
(run-shell-command (cat "feh --bg-max " *wallpapers-dir*  "Doctors.jpg"))
;; vim: set ft=lisp : ;;
